/*
 * VentanaNuevoAlimento.java
 *
 * Created on 18 de septiembre de 2008, 07:41
 */

package vista;

//import controlador.ControladorAlta;
//import controlador.ControladorConsulta;
//import datos.ElementoSql;
//import datos.Modificacion;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import dominio.Elemento;

/**
 *
 * @author  marcelo
 */
public class VentanaNuevoAlimento extends javax.swing.JFrame 
{
    private Collection alimentos = new ArrayList();
    private int vFila;

    /** Creates new form VentanaNuevoAlimento */
    public VentanaNuevoAlimento() {
        initComponents();
        this.inicializar();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAlimentos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldTipo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jButtonGuardar = new javax.swing.JButton();
        jButtonLimpiar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nuevo Alimento");
        setResizable(false);

        jTableAlimentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Orden", "Codigo", "Tipo", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAlimentos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableAlimentosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAlimentos);

        jLabel1.setBackground(new java.awt.Color(255, 255, 204));
        jLabel1.setText("Tipo");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setOpaque(true);

        jLabel2.setBackground(new java.awt.Color(255, 255, 204));
        jLabel2.setText("Nombre");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setOpaque(true);

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonLimpiar.setText("Limpiar");

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextFieldTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                                        .addComponent(jButtonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(259, 259, 259))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(jButtonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSalir)
                    .addComponent(jButtonGuardar)
                    .addComponent(jButtonLimpiar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
// TODO add your handling code here:
    this.dispose();
}//GEN-LAST:event_jButtonSalirActionPerformed

private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
// TODO add your handling code here:
//    this.guardar();
}//GEN-LAST:event_jButtonGuardarActionPerformed

private void jTableAlimentosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableAlimentosKeyReleased
// TODO add your handling code here:
    if(evt.getKeyCode() != 10)
        this.vFila = this.jTableAlimentos.getSelectedRow();
//    else
//        this.modificarRegistro(this.vFila);
}//GEN-LAST:event_jTableAlimentosKeyReleased

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaNuevoAlimento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAlimentos;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldTipo;
    // End of variables declaration//GEN-END:variables

    ///////// INICIALIZACION DE FORMULARIO /////////////////////
    private void inicializar()
    {
        this.centrar();
        this.ajustarTamanioColumna();
        this.limpiar();
//        this.cargarTabla();
    }
    
    private void centrar()
    {
        Dimension pantalla, cuadro;
	pantalla = Toolkit.getDefaultToolkit().getScreenSize();
	cuadro = this.getSize();
	this.setLocation(((pantalla.width - cuadro.width)/2), (pantalla.height - cuadro.height)/2);
    }
    
    private void ajustarTamanioColumna()
    {
        TableColumn column = null;
        for (int i = 0; i < 4; i++) 
        {
            column = jTableAlimentos.getColumnModel().getColumn(i);
            switch(i)
            {
                case 0:
                        column.setPreferredWidth(15);
                        break;
                case 1:
                        column.setPreferredWidth(22);
                        break;
                case 2:
                        column.setPreferredWidth(187); 
                        break;
                case 3:
                        column.setPreferredWidth(185); 
                        break;
            }
        }
    }
    
        /////////////////// MANEJO DE TABLA ////////////////////////////////
//    private void cargarTabla()
//    {
//        ControladorConsulta con = new ControladorConsulta();
//        int contador = 0;
//        this.alimentos = con.getAlimentos();
//        DefaultTableModel modelo = (DefaultTableModel)this.jTableAlimentos.getModel();
//        String datos[] = new String[4];
//        Iterator it = this.alimentos.iterator();
//        Elemento e = new Elemento();
//        while(it.hasNext())
//        {
//            e = (Elemento)it.next();
//            contador++;
//            datos[0] = String.valueOf(contador);
//            datos[1] = String.valueOf(e.getCodigo()).trim();
//            datos[2] = e.getTipo().trim();
//            datos[3] = e.getNombre().trim();
//            modelo.addRow(datos);
//        }
//        e = null;
//        modelo = null;
//        it = null;
//        con = null;
//    }
    
    /**
     * Metodo para limpiar los registros de la tabla.
     * Quita todas las filas de la tabla.
     */
    private void limpiar()
    {
        DefaultTableModel modelo = (DefaultTableModel)this.jTableAlimentos.getModel();
        while(this.jTableAlimentos.getRowCount() != 0)
                modelo.removeRow(0);
        modelo = null;
    }
    

    
    ////////////// GUARDAR REGISTRO /////////////////////
    
    private boolean verificaBlancos ()
    {
     boolean bandera = true;
     String var;
     var= this.jTextFieldNombre.getText();
     if ( var.trim().length()== 0)
         bandera = false;
     var = this.jTextFieldTipo.getText();
     if ( var.trim().length()== 0)
         bandera = false;
     return bandera;
    }
    
//    private void guardar()
//    {
//        if (this.verificaBlancos() == true )
//        {
//        ControladorAlta alta = new ControladorAlta();
//        Elemento elemento = new Elemento();
//        elemento.setNombre(this.jTextFieldNombre.getText().trim().toUpperCase());
//        elemento.setTipo(this.jTextFieldTipo.getText().trim().toUpperCase());
//        
//            if(alta.almacenar(elemento) == 1) // si es 1 quiere decir que guardo un registro
//            {
//                this.jTextFieldNombre.setText("");
//                this.jTextFieldTipo.setText("");
//                this.jTextFieldTipo.requestFocus();
//                this.limpiar();
//                this.cargarTabla();
//            }
//        }
//        else 
//        JOptionPane.showMessageDialog(null, "Asegurese de que los campos esten llenos","hay campos en blanco",JOptionPane.ERROR_MESSAGE);
//    }
    
    ////////////////// MODIFICAR REGISTRO /////////////////////
    /**
     * La idea del metodo es modificar el registro desde el grid y actualizar la base de datos.
     * @param fila numero de fila del registro que se esta modificando.
     */
//    private void modificarRegistro(int fila)
//    {
//        Elemento elemento = this.buscarElemento(fila);
//        elemento.setNombre(String.valueOf(this.jTableAlimentos.getValueAt(fila, 3)).trim().toUpperCase());
//        elemento.setTipo(String.valueOf(this.jTableAlimentos.getValueAt(fila, 2)).trim().toUpperCase());
////        Modificacion mod = new Modificacion();
//        ElementoSql sql = new ElementoSql();
//        if(sql.modificar(elemento) != 1)
//        {
//            JOptionPane.showMessageDialog(null, "No se pudo modificar los datos, intente mas tarde", "Error al intentar modifcar", JOptionPane.ERROR_MESSAGE);
//            this.limpiar();
//            this.cargarTabla();
//        }
//        else
//        {
//            this.limpiar();
//            this.cargarTabla();
//        }
//    }
    
    private Elemento buscarElemento(int fila)
    {
        Elemento el = new Elemento();
        Iterator it = this.alimentos.iterator();
        while(it.hasNext())
        {
            el = (Elemento)it.next();
            if(el.getCodigo() == Integer.parseInt(String.valueOf(this.jTableAlimentos.getValueAt(fila, 1))))
                break;
        }
        return el;
    }
}
